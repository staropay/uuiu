import logging
import time
from telegram import Update, LabeledPrice, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
import database
from ui import get_deposit_options_keyboard, get_back_to_menu_keyboard_nested

logger = logging.getLogger(__name__)

CHOOSE_AMOUNT, CUSTOM_AMOUNT, LINK_SENT = range(3)

async def deposit_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∑–≤–µ–∑–¥–∞–º–∏ ‚≠ê:",
        reply_markup=get_deposit_options_keyboard()
    )
    return CHOOSE_AMOUNT

async def select_deposit_amount(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    amount_str = query.data.split('_')[1]

    if amount_str == 'custom':
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –∑–≤–µ–∑–¥–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 150, –º–∏–Ω. 1, –º–∞–∫—Å. 10000):")
        return CUSTOM_AMOUNT
    else:
        amount = int(amount_str)
        return await create_and_send_payment_link(update, context, amount)

async def process_custom_amount(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        amount = int(update.message.text)
        if not (1 <= amount <= 10000):
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10000.", reply_markup=get_back_to_menu_keyboard_nested())
            return LINK_SENT
    except (ValueError, TypeError):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.", reply_markup=get_back_to_menu_keyboard_nested())
        return LINK_SENT
    
    await update.message.delete()
    return await create_and_send_payment_link(update, context, amount)

async def create_and_send_payment_link(update: Update, context: ContextTypes.DEFAULT_TYPE, amount: int) -> int:
    title = "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–∞–∑–∏–Ω–æ"
    description = f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –∏–≥—Ä–æ–≤–æ–≥–æ —Å—á–µ—Ç–∞ –Ω–∞ {amount} ‚≠ê"
    
    timestamp = int(time.time())
    payload = f"casino-deposit-{update.effective_user.id}-{timestamp}"
    
    currency = "XTR"
    prices = [LabeledPrice("–ò–≥—Ä–æ–≤—ã–µ –∑–≤–µ–∑–¥—ã", amount)]

    try:
        link = await context.bot.create_invoice_link(title, description, payload, currency, prices)
        
        text = (f"–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ <b>{amount} ‚≠ê</b>, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.\n\n"
                "<i>–°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.</i>")
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(f"üí≥ –û–ø–ª–∞—Ç–∏—Ç—å {amount} ‚≠ê", url=link)],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu_from_nested")]
        ])

        if update.callback_query:
            await update.callback_query.edit_message_text(text, reply_markup=keyboard, parse_mode='HTML')
        else:
            await context.bot.send_message(update.effective_chat.id, text, reply_markup=keyboard, parse_mode='HTML')

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É: {e}")
        text = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        reply_markup = get_back_to_menu_keyboard_nested()
        if update.callback_query:
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
        else:
            await context.bot.send_message(update.effective_chat.id, text, reply_markup=reply_markup)
    
    return LINK_SENT

async def precheckout_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.pre_checkout_query
    if not query.invoice_payload.startswith('casino-deposit-'):
        await query.answer(ok=False, error_message="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...")
    else:
        await query.answer(ok=True)
        logger.info(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω pre-checkout –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query.from_user.id}")

async def successful_payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    payment = update.message.successful_payment
    amount = payment.total_amount
    
    await database.update_user_balance(user.id, amount, relative=True)
    new_balance = await database.get_user_balance(user.id)
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ {amount} ‚≠ê.")
    await context.bot.send_message(
        chat_id=user.id,
        text=f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n\n–ù–∞ –≤–∞—à —Å—á–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω–æ: <b>{amount}</b> ‚≠ê\n–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <b>{new_balance}</b> ‚≠ê",
        parse_mode='HTML'
    )