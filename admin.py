import logging
import asyncio
import time
from functools import wraps
from telegram import Update
from telegram.ext import ContextTypes
from telegram.error import TelegramError
from config import ADMIN_ID
import database

logger = logging.getLogger(__name__)

def admin_only(func):
    @wraps(func)
    async def wrapped(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        user_id = update.effective_user.id
        if str(user_id) != ADMIN_ID:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        return await func(update, context, *args, **kwargs)
    return wrapped

@admin_only
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "<b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        "/check_balance <code>[user_id]</code> - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å\n"
        "/add_balance <code>[user_id] [amount]</code> - –ù–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å\n"
        "/sub_balance <code>[user_id] [amount]</code> - –°–ø–∏—Å–∞—Ç—å –±–∞–ª–∞–Ω—Å\n"
        "/broadcast <code>[message]</code> - –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É\n"
        "/server_stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ä–≤–µ—Ä–∞"
    )
    await update.message.reply_html(text)

@admin_only
async def check_user_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        target_id = int(context.args[0])
        balance = await database.get_user_balance(target_id)
        await update.message.reply_text(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id}: {balance} ‚≠ê")
    except (IndexError, ValueError):
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /check_balance [user_id]")

@admin_only
async def add_to_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        target_id = int(context.args[0])
        amount = int(context.args[1])
        await database.update_user_balance(target_id, amount, relative=True)
        new_balance = await database.get_user_balance(target_id)
        await update.message.reply_text(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id} –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount}. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} ‚≠ê")
    except (IndexError, ValueError):
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_balance [user_id] [amount]")

@admin_only
async def subtract_from_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        target_id = int(context.args[0])
        amount = int(context.args[1])
        await database.update_user_balance(target_id, -amount, relative=True)
        new_balance = await database.get_user_balance(target_id)
        await update.message.reply_text(f"–° –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id} —Å–ø–∏—Å–∞–Ω–æ {amount}. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} ‚≠ê")
    except (IndexError, ValueError):
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /sub_balance [user_id] [amount]")

async def send_message_to_user(bot, user_id: int, message: str) -> bool:
    try:
        await bot.send_message(chat_id=user_id, text=message, parse_mode='HTML')
        return True
    except TelegramError as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        return False

@admin_only
async def broadcast_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message_to_send = " ".join(context.args)
    if not message_to_send:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. /broadcast [—Ç–µ–∫—Å—Ç]")
        return

    await update.message.reply_text("‚è≥ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    start_time = time.time()
    
    user_ids = await database.get_all_user_ids()
    tasks = [send_message_to_user(context.bot, user_id, message_to_send) for user_id in user_ids]
    results = await asyncio.gather(*tasks)
    
    end_time = time.time()
    duration = end_time - start_time
    
    success_count = sum(results)
    fail_count = len(user_ids) - success_count
    
    await update.message.reply_text(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {duration:.2f} —Å–µ–∫.\n"
        f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
        f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {fail_count}"
    )

@admin_only
async def show_server_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    stats = await database.get_global_stats()
    
    if not stats or stats['total_users'] == 0:
        await update.message.reply_text("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞.")
        return
        
    total_users = stats['total_users']
    avg_balance = (stats['total_balance'] / total_users) if total_users > 0 else 0
    avg_games = (stats['total_games'] / total_users) if total_users > 0 else 0
    
    casino_profit = -stats['casino_profit']
    profit_sign = "+" if casino_profit >= 0 else ""
    profit_emoji = "üìà" if casino_profit >= 0 else "üìâ"
    
    text = (
        f"<b>‚öôÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –°–µ—Ä–≤–µ—Ä–∞</b>\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total_users}</b>\n"
        f"üïπÔ∏è –í—Å–µ–≥–æ —Å—ã–≥—Ä–∞–Ω–æ –∏–≥—Ä: <b>{stats['total_games'] or 0}</b>\n"
        f"üí∏ –û–±—â–∏–π –æ–±–æ—Ä–æ—Ç (—Å—É–º–º–∞ —Å—Ç–∞–≤–æ–∫): <b>{stats['total_wager'] or 0}</b> ‚≠ê\n"
        f"üè¶ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{stats['total_balance'] or 0}</b> ‚≠ê\n"
        f"{profit_emoji} –ü—Ä–∏–±—ã–ª—å –∫–∞–∑–∏–Ω–æ: <b>{profit_sign}{casino_profit}</b> ‚≠ê\n\n"
        f"<b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞:</b>\n"
        f"üí∞ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–∞–Ω—Å –Ω–∞ –∏–≥—Ä–æ–∫–∞: <b>{avg_balance:.2f}</b> ‚≠ê\n"
        f"üéÆ –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª-–≤–æ –∏–≥—Ä –Ω–∞ –∏–≥—Ä–æ–∫–∞: <b>{avg_games:.2f}</b>"
    )
    
    await update.message.reply_html(text)