import logging
import asyncio
import re
from html import escape
from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler
import database
from config import MIN_BET, MAX_BET, MIN_WITHDRAWAL, ADMIN_CHAT_ID
from ui import get_main_menu_keyboard, get_game_choice_keyboard, get_back_to_menu_keyboard_nested, get_back_to_menu_keyboard_simple, get_post_game_keyboard

logger = logging.getLogger(__name__)

MAIN_MENU, GAME_CHOICE, BET_PLACEMENT, RESULT_SHOWN, POST_GAME_CHOICE, CHANGE_BET, WITHDRAW_AMOUNT, REQUEST_SENT, SETTING_NICKNAME, NICKNAME_SET, REFERRAL_MENU = range(11)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    await database.add_user_if_not_exists(user.id, user.username)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    referral_bonus_text = ""
    if update.message and update.message.text:
        # –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–º–∞–Ω–¥—ã /start?ref=CODE
        import re
        ref_match = re.search(r'/start\s+(\w+)', update.message.text)
        if ref_match:
            referral_code = ref_match.group(1)
            await process_referral_registration(user.id, referral_code, context)
            referral_bonus_text = "\n\nüéÅ <b>–ë–æ–Ω—É—Å –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ: +50 ‚≠ê</b>"
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.username}) –∑–∞–ø—É—Å—Ç–∏–ª/–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.")
    
    text = f"üëã –ü—Ä–∏–≤–µ—Ç, {user.mention_html()}!\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ –∫–∞–∑–∏–Ω–æ! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:{referral_bonus_text}"
    reply_markup = get_main_menu_keyboard()
    
    if update.message:
        await update.message.reply_html(text, reply_markup=reply_markup)
    elif update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')

    return MAIN_MENU

async def start_over(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    return await start(update, context)

async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    text = f"üëã –ü—Ä–∏–≤–µ—Ç, {user.mention_html()}!\n\n–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"
    reply_markup = get_main_menu_keyboard()
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
    
    return ConversationHandler.END

async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    user_balance = await database.get_user_balance(user_id)
    text = f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{user_balance}</b> ‚≠ê"
    
    await query.edit_message_text(text, reply_markup=get_back_to_menu_keyboard_simple(), parse_mode='HTML')

async def rules(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    rules_text = (
        "<b>üìú –ü—Ä–∞–≤–∏–ª–∞ –ò–≥—Ä—ã –∏ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã</b>\n\n"
        f"<b>–°—Ç–∞–≤–∫–∏:</b> –æ—Ç {MIN_BET} –¥–æ {MAX_BET} ‚≠ê.\n"
        f"<b>–í—ã–≤–æ–¥:</b> –æ—Ç {MIN_WITHDRAWAL} ‚≠ê.\n\n"
        "<b>üé∞ –°–ª–æ—Ç-–º–∞—à–∏–Ω–∞:</b>\n"
        "  7Ô∏è‚É£7Ô∏è‚É£7Ô∏è‚É£ (–î–∂–µ–∫–ø–æ—Ç): <b>x50</b>\n"
        "  üçáüçáüçá (–¢—Ä–∏ –≤–∏–Ω–æ–≥—Ä–∞–¥–∞): <b>x20</b>\n"
        "  üçãüçãüçã (–¢—Ä–∏ –ª–∏–º–æ–Ω–∞): <b>x10</b>\n"
        "  üÖ±Ô∏èüÖ±Ô∏èüÖ±Ô∏è (–¢—Ä–∏ BAR): <b>x5</b>\n\n"
        "<b>üé≤ –ö–æ—Å—Ç–∏:</b>\n"
        "  –í—ã–ø–∞–ª–æ 6: <b>x3</b>\n"
        "  –í—ã–ø–∞–ª–æ 5: <b>x2</b>\n\n"
        "<b>üèÄ/‚öΩ –ë–∞—Å–∫–µ—Ç–±–æ–ª/–§—É—Ç–±–æ–ª:</b>\n"
        "  –ú—è—á –≤ —Ü–µ–ª–∏ (–ø–æ–ø–∞–¥–∞–Ω–∏–µ): <b>x2.5</b>\n"
        "  –ü–æ—á—Ç–∏ –ø–æ–ø–∞–ª (—Ä—è–¥–æ–º): <b>x1 (–≤–æ–∑–≤—Ä–∞—Ç —Å—Ç–∞–≤–∫–∏)</b>"
    )
    await query.edit_message_text(rules_text, reply_markup=get_back_to_menu_keyboard_simple(), parse_mode='HTML')

async def play_game(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:", reply_markup=get_game_choice_keyboard())
    return GAME_CHOICE

async def choose_game(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    context.user_data["game"] = query.data.split('_')[1]
    await query.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∏–≥—Ä—É. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Ç–∞–≤–∫—É (–æ—Ç {MIN_BET} –¥–æ {MAX_BET} ‚≠ê):")
    return BET_PLACEMENT

async def place_bet(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    try:
        bet = int(update.message.text)
    except (ValueError, TypeError):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.", reply_markup=get_back_to_menu_keyboard_nested())
        return RESULT_SHOWN

    user_balance = await database.get_user_balance(user.id)

    if not (MIN_BET <= bet <= MAX_BET) or bet > user_balance:
        await update.message.reply_text(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞. –í–∞—à –±–∞–ª–∞–Ω—Å: {user_balance} ‚≠ê.", reply_markup=get_back_to_menu_keyboard_nested())
        return RESULT_SHOWN

    await database.update_user_balance(user.id, -bet, relative=True)
    
    game_emoji = {"dice": "üé≤", "basketball": "üèÄ", "football": "‚öΩ", "dart": "üé∞"}[context.user_data["game"]]
    
    msg = await context.bot.send_dice(chat_id=update.effective_chat.id, emoji=game_emoji)
    
    await asyncio.sleep(3.5)
    
    dice_value = msg.dice.value
    win_amount = 0
    result_text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏."
    game = context.user_data["game"]

    if game == 'dart':
        if dice_value == 64: win_amount, result_text = bet * 50, "–î–ñ–ï–ö–ü–û–¢! 7Ô∏è‚É£7Ô∏è‚É£7Ô∏è‚É£"
        elif dice_value == 43: win_amount, result_text = bet * 10, "–ù–µ–ø–ª–æ—Ö–æ! –¢—Ä–∏ –ª–∏–º–æ–Ω–∞! üçãüçãüçã"
        elif dice_value == 22: win_amount, result_text = bet * 20, "–û—Ç–ª–∏—á–Ω–æ! –¢—Ä–∏ –≤–∏–Ω–æ–≥—Ä–∞–¥–∞! üçáüçáüçá"
        elif dice_value == 1: win_amount, result_text = bet * 5, "–í—ã–∏–≥—Ä—ã—à! –¢—Ä–∏ BAR! üÖ±Ô∏èüÖ±Ô∏èüÖ±Ô∏è"
    elif game == 'dice':
        if dice_value == 6: win_amount, result_text = bet * 3, "–í—ã–ø–∞–ª–æ 6! –í–∞—à –≤—ã–∏–≥—Ä—ã—à!"
        elif dice_value == 5: win_amount, result_text = bet * 2, "–í—ã–ø–∞–ª–æ 5! –í—ã –ø–æ–±–µ–¥–∏–ª–∏!"
    elif game in ['basketball', 'football']:
        if dice_value == 5: win_amount, result_text = int(bet * 2.5), "–ì–û–õ! –í—ã –ø–æ–±–µ–¥–∏–ª–∏!"
        elif dice_value == 4: win_amount, result_text = bet, "–ü–æ—á—Ç–∏! –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞."

    if win_amount > 0:
        await database.update_user_balance(user.id, win_amount, relative=True)
    
    await database.update_user_stats(user.id, bet, win_amount)
    
    final_balance = await database.get_user_balance(user.id)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    context.user_data["current_game"] = game
    context.user_data["current_bet"] = bet
    
    text = (f"{result_text}\n\n"
            f"–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {bet} ‚≠ê | –í—ã–∏–≥—Ä—ã—à: {win_amount} ‚≠ê\n"
            f"–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <b>{final_balance}</b> ‚≠ê")
    
    await update.message.reply_html(text, reply_markup=get_post_game_keyboard())
    return POST_GAME_CHOICE

async def withdraw(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    user_balance = await database.get_user_balance(user_id)

    if user_balance < MIN_WITHDRAWAL:
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ {MIN_WITHDRAWAL} ‚≠ê. –£ –≤–∞—Å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ {user_balance} ‚≠ê.", reply_markup=get_back_to_menu_keyboard_nested())
        return REQUEST_SENT
    
    await query.edit_message_text(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user_balance} ‚≠ê. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏:")
    return WITHDRAW_AMOUNT

async def process_withdrawal_amount(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    try:
        amount = int(update.message.text)
    except (ValueError, TypeError):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.", reply_markup=get_back_to_menu_keyboard_nested())
        return REQUEST_SENT

    user_balance = await database.get_user_balance(user.id)

    if amount < MIN_WITHDRAWAL or amount > user_balance:
        await update.message.reply_text(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –í–∞—à –±–∞–ª–∞–Ω—Å: {user_balance} ‚≠ê.", reply_markup=get_back_to_menu_keyboard_nested())
        return REQUEST_SENT

    await database.update_user_balance(user.id, -amount, relative=True)
    new_balance = await database.get_user_balance(user.id)

    admin_message = (f"‚ùóÔ∏è <b>–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥</b> ‚ùóÔ∏è\n\n"
                     f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.mention_html()} ({user.id})\n"
                     f"–°—É–º–º–∞: <b>{amount}</b> ‚≠ê\n"
                     f"–ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ: {new_balance} ‚≠ê")
    
    try:
        if ADMIN_CHAT_ID:
            await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=admin_message, parse_mode='HTML')
            await update.message.reply_text(f"‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ {amount} ‚≠ê –ø—Ä–∏–Ω—è—Ç.", reply_markup=get_back_to_menu_keyboard_nested())
        else:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å.", reply_markup=get_back_to_menu_keyboard_nested())
            await database.update_user_balance(user.id, amount, relative=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å.", reply_markup=get_back_to_menu_keyboard_nested())
        await database.update_user_balance(user.id, amount, relative=True)

    return REQUEST_SENT

async def show_top(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    if query:
        await query.answer()
        
    top_users = await database.get_top_users(10)
    
    if not top_users:
        text = "üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ–∫–∞ –ø—É—Å—Ç–∞."
    else:
        text = "<b>üèÜ –¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –±–∞–ª–∞–Ω—Å—É:</b>\n\n"
        for i, user in enumerate(top_users):
            rank = i + 1
            display_name = user['nickname'] if user['nickname'] else user['username']
            safe_display_name = escape(display_name) if display_name else f"User {user['user_id']}"
            balance = user['balance']
            
            line = f"<b>{rank}.</b> {safe_display_name} ‚Äî <code>{balance}</code> ‚≠ê\n"
            if user['user_id'] == update.effective_user.id:
                line = f"‚û°Ô∏è {line}"
            text += line
            
    reply_markup = get_back_to_menu_keyboard_simple()
    
    if query:
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
    else:
        await update.message.reply_html(text, reply_markup=reply_markup)

async def request_nickname_from_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º (3-15 —Å–∏–º–≤–æ–ª–æ–≤, –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, _-):")
    return SETTING_NICKNAME

async def request_nickname(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º (3-15 —Å–∏–º–≤–æ–ª–æ–≤, –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, _-):")
    return SETTING_NICKNAME

async def save_nickname(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    nickname = update.message.text
    if not (3 <= len(nickname) <= 15 and re.match(r'^[a-zA-Z0-9_-]+$', nickname)):
        await update.message.reply_html(
            "‚ùå <b>–û—à–∏–±–∫–∞:</b> –ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª–∏–Ω–æ–π –æ—Ç 3 –¥–æ 15 —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –∑–Ω–∞–∫–∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è (_) –∏–ª–∏ –¥–µ—Ñ–∏—Å—ã (-)."
        )
        return SETTING_NICKNAME

    user_id = update.effective_user.id
    await database.set_user_nickname(user_id, nickname)
    
    await update.message.reply_html(
        f"‚úÖ –í–∞—à –Ω–∏–∫–Ω–µ–π–º —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: <b>{escape(nickname)}</b>",
        reply_markup=get_back_to_menu_keyboard_nested()
    )
    return NICKNAME_SET

# –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ—Å—Ç-–∏–≥—Ä–æ–≤–æ–≥–æ –º–µ–Ω—é
async def handle_post_game_back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é' –ø–æ—Å–ª–µ –∏–≥—Ä—ã"""
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    text = f"üëã –ü—Ä–∏–≤–µ—Ç, {user.mention_html()}!\n\n–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"
    reply_markup = get_main_menu_keyboard()
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
    context.user_data.pop("current_game", None)
    context.user_data.pop("current_bet", None)
    
    return ConversationHandler.END

async def handle_post_game_change_bet(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞–≤–∫—É' –ø–æ—Å–ª–µ –∏–≥—Ä—ã"""
    query = update.callback_query
    await query.answer()
    
    current_game = context.user_data.get("current_game")
    if not current_game:
        await query.edit_message_text("–û—à–∏–±–∫–∞: –∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=get_back_to_menu_keyboard_nested())
        return ConversationHandler.END
    
    game_names = {"dice": "–∫–æ—Å—Ç–∏", "basketball": "–±–∞—Å–∫–µ—Ç–±–æ–ª", "football": "—Ñ—É—Ç–±–æ–ª", "dart": "—Å–ª–æ—Ç-–º–∞—à–∏–Ω–∞"}
    game_name = game_names.get(current_game, current_game)
    
    await query.edit_message_text(
        f"–í—ã –∏–≥—Ä–∞–µ—Ç–µ –≤ {game_name}. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–∞–≤–∫—É (–æ—Ç {MIN_BET} –¥–æ {MAX_BET} ‚≠ê):",
        reply_markup=get_back_to_menu_keyboard_nested()
    )
    return CHANGE_BET

async def handle_post_game_play_again(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞' –ø–æ—Å–ª–µ –∏–≥—Ä—ã"""
    query = update.callback_query
    await query.answer()
    
    current_game = context.user_data.get("current_game")
    current_bet = context.user_data.get("current_bet")
    
    if not current_game or not current_bet:
        await query.edit_message_text("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=get_back_to_menu_keyboard_nested())
        return ConversationHandler.END
    
    user = update.effective_user
    user_balance = await database.get_user_balance(user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–≥—Ä—ã
    if current_bet > user_balance:
        await query.edit_message_text(
            f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–≥—Ä—ã. –í–∞—à –±–∞–ª–∞–Ω—Å: {user_balance} ‚≠ê",
            reply_markup=get_back_to_menu_keyboard_nested()
        )
        return ConversationHandler.END
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É —Å —Ç–æ–π –∂–µ —Å—Ç–∞–≤–∫–æ–π
    return await play_game_with_bet(update, context, current_bet)

async def handle_change_bet_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π —Å—Ç–∞–≤–∫–∏"""
    user = update.effective_user
    try:
        new_bet = int(update.message.text)
    except (ValueError, TypeError):
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.",
            reply_markup=get_back_to_menu_keyboard_nested()
        )
        return CHANGE_BET

    user_balance = await database.get_user_balance(user.id)

    if not (MIN_BET <= new_bet <= MAX_BET) or new_bet > user_balance:
        await update.message.reply_text(
            f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞. –í–∞—à –±–∞–ª–∞–Ω—Å: {user_balance} ‚≠ê.",
            reply_markup=get_back_to_menu_keyboard_nested()
        )
        return CHANGE_BET

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É —Å –Ω–æ–≤–æ–π —Å—Ç–∞–≤–∫–æ–π
    return await play_game_with_bet(update, context, new_bet)

async def play_game_with_bet(update: Update, context: ContextTypes.DEFAULT_TYPE, bet: int) -> int:
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã —Å –∑–∞–¥–∞–Ω–Ω–æ–π —Å—Ç–∞–≤–∫–æ–π"""
    user = update.effective_user
    game = context.user_data.get("current_game")
    
    if not game:
        if update.message:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=get_back_to_menu_keyboard_nested())
        else:
            query = update.callback_query
            await query.edit_message_text("–û—à–∏–±–∫–∞: –∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=get_back_to_menu_keyboard_nested())
        return ConversationHandler.END
    
    await database.update_user_balance(user.id, -bet, relative=True)
    
    game_emoji = {"dice": "üé≤", "basketball": "üèÄ", "football": "‚öΩ", "dart": "üé∞"}[game]
    
    msg = await context.bot.send_dice(chat_id=update.effective_chat.id, emoji=game_emoji)
    
    await asyncio.sleep(3.5)
    
    dice_value = msg.dice.value
    win_amount = 0
    result_text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏."

    if game == 'dart':
        if dice_value == 64: win_amount, result_text = bet * 50, "–î–ñ–ï–ö–ü–û–¢! 7Ô∏è‚É£7Ô∏è‚É£7Ô∏è‚É£"
        elif dice_value == 43: win_amount, result_text = bet * 10, "–ù–µ–ø–ª–æ—Ö–æ! –¢—Ä–∏ –ª–∏–º–æ–Ω–∞! üçãüçãüçã"
        elif dice_value == 22: win_amount, result_text = bet * 20, "–û—Ç–ª–∏—á–Ω–æ! –¢—Ä–∏ –≤–∏–Ω–æ–≥—Ä–∞–¥–∞! üçáüçáüçá"
        elif dice_value == 1: win_amount, result_text = bet * 5, "–í—ã–∏–≥—Ä—ã—à! –¢—Ä–∏ BAR! üÖ±Ô∏èüÖ±Ô∏èüÖ±Ô∏è"
    elif game == 'dice':
        if dice_value == 6: win_amount, result_text = bet * 3, "–í—ã–ø–∞–ª–æ 6! –í–∞—à –≤—ã–∏–≥—Ä—ã—à!"
        elif dice_value == 5: win_amount, result_text = bet * 2, "–í—ã–ø–∞–ª–æ 5! –í—ã –ø–æ–±–µ–¥–∏–ª–∏!"
    elif game in ['basketball', 'football']:
        if dice_value == 5: win_amount, result_text = int(bet * 2.5), "–ì–û–õ! –í—ã –ø–æ–±–µ–¥–∏–ª–∏!"
        elif dice_value == 4: win_amount, result_text = bet, "–ü–æ—á—Ç–∏! –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞."

    if win_amount > 0:
        await database.update_user_balance(user.id, win_amount, relative=True)
    
    await database.update_user_stats(user.id, bet, win_amount)
    
    final_balance = await database.get_user_balance(user.id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å—Ç–∞–≤–∫—É
    context.user_data["current_bet"] = bet
    
    text = (f"{result_text}\n\n"
            f"–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {bet} ‚≠ê | –í—ã–∏–≥—Ä—ã—à: {win_amount} ‚≠ê\n"
            f"–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <b>{final_balance}</b> ‚≠ê")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if update.message:
        await update.message.reply_html(text, reply_markup=get_post_game_keyboard())
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ callback_query, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text,
            reply_markup=get_post_game_keyboard(),
            parse_mode='HTML'
        )
    
    return POST_GAME_CHOICE

# ==================== –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê ====================

async def process_referral_registration(user_id: int, referral_code: str, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ"""
    try:
        # –ù–∞—Ö–æ–¥–∏–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –ø–æ –∫–æ–¥—É
        referrer_id = await database.get_user_by_referral_code(referral_code)
        if not referrer_id:
            logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º: {referral_code}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ —Å–≤–æ–µ–π —Å—Å—ã–ª–∫–µ
        if referrer_id == user_id:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ —Å–≤–æ–µ–π —Å—Å—ã–ª–∫–µ")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –±—ã–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω
        cursor = await database.get_user_referrals(referrer_id)
        for referral in cursor:
            if referral['referred_id'] == user_id:
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –±—ã–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {referrer_id}")
                return False
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–≤—è–∑—å
        success = await database.add_referral_relationship(referrer_id, user_id)
        if not success:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–≤—è–∑—å: {referrer_id} -> {user_id}")
            return False
        
        # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å—ã
        bonus_success = await database.pay_referral_bonuses(referrer_id, user_id)
        if not bonus_success:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∏—Å–ª–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã: {referrer_id} -> {user_id}")
            return False
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await database.update_referral_stats(referrer_id)
        
        logger.info(f"–£—Å–ø–µ—à–Ω–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {referrer_id} -> {user_id}")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        return False

async def referral_system(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    text = f"üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</b>\n\n–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π –±–æ–Ω—É—Å—ã!\n\n"
    text += "üéÅ <b>–ë–æ–Ω—É—Å—ã:</b>\n"
    text += "‚Ä¢ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç <b>50 ‚≠ê</b>\n"
    text += "‚Ä¢ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ <b>25 ‚≠ê</b> –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    from ui import get_referral_menu_keyboard
    reply_markup = get_referral_menu_keyboard()
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    await query.delete_message()
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=text,
        reply_markup=reply_markup,
        parse_mode='HTML'
    )
    return REFERRAL_MENU

async def show_referral_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    referral_info = await database.get_user_referral_info(user_id)
    
    if not referral_info:
        text = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"
        await query.delete_message()
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text,
            reply_markup=get_back_to_menu_keyboard_simple(),
            parse_mode='HTML'
        )
        return MAIN_MENU
    
    text = f"üìä <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
    text += f"üë• –ü—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{referral_info['referrals_count']}</b>\n"
    text += f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>{referral_info['referral_earnings']} ‚≠ê</b>\n\n"
    
    if referral_info['referrals_count'] > 0:
        text += "üìã <b>–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:</b>\n"
        referrals = await database.get_user_referrals(user_id)
        for i, referral in enumerate(referrals[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
            name = referral['nickname'] or referral['username'] or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {referral['referred_id']}"
            text += f"{i}. {name}\n"
        
        if len(referrals) > 5:
            text += f"... –∏ –µ—â—ë {len(referrals) - 5} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
    
    from ui import get_referral_stats_keyboard
    reply_markup = get_referral_stats_keyboard()
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    await query.delete_message()
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=text,
        reply_markup=reply_markup,
        parse_mode='HTML'
    )
    return REFERRAL_MENU

async def generate_referral_link(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    referral_code = await database.ensure_referral_code(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    bot_info = await context.bot.get_me()
    bot_username = bot_info.username
    
    referral_link = f"https://t.me/{bot_username}?start={referral_code}"
    
    text = f"üîó <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞</b>\n\n"
    text += f"<code>{referral_link}</code>\n\n"
    text += "üìã –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–∑—å—è–º!\n\n"
    text += "üéÅ <b>–ë–æ–Ω—É—Å—ã:</b>\n"
    text += "‚Ä¢ –í–∞—à –¥—Ä—É–≥ –ø–æ–ª—É—á–∏—Ç <b>50 ‚≠ê</b> –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n"
    text += "‚Ä¢ –í—ã –ø–æ–ª—É—á–∏—Ç–µ <b>25 ‚≠ê</b> –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ"
    
    from ui import get_referral_stats_keyboard
    reply_markup = get_referral_stats_keyboard()
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    await query.delete_message()
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=text,
        reply_markup=reply_markup,
        parse_mode='HTML'
    )
    return REFERRAL_MENU

async def show_referral_list(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    referrals = await database.get_user_referrals(user_id)
    
    if not referrals:
        text = "üìã <b>–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã</b>\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n"
        text += "üîó –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏!"
    else:
        text = f"üìã <b>–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã</b>\n\n"
        text += f"–í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö: <b>{len(referrals)}</b>\n\n"
        
        for i, referral in enumerate(referrals, 1):
            name = referral['nickname'] or referral['username'] or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {referral['referred_id']}"
            date = referral['created_at'].split()[0] if referral['created_at'] else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            text += f"{i}. <b>{name}</b> - {date}\n"
    
    from ui import get_referral_stats_keyboard
    reply_markup = get_referral_stats_keyboard()
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    await query.delete_message()
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=text,
        reply_markup=reply_markup,
        parse_mode='HTML'
    )
    return REFERRAL_MENU